
Zadanie 5
Sprawdź poprawność działania poniższego programu, a następnie spróbuj zmodyfikować
program tak aby działał poprawnie. Otrzymane wyniki i wnioski zapisz na platformie moodle.
#include <iostream>
#include <iomanip>
int main() {
 double a = 0.1;
 double b = 0.2;
 double c = a + b;
 if(c == 0.3) {
 std::cout<<"suma="<<c<<std::endl;
 }
 return 0;
}
Kompilacja i uruchamianie:
g++ lab1_zad5.cpp -o lab1_zad5.exe ; ./lab1_zad5.exe
Zadanie 6
Korzystając z poniższego programu sprawdź dokładność wykonywanych obliczeń.
W poniższym programie pętla wykona 100 iteracji, w ramach których sumaryczna wartość
zmiennej suma zwiększa się za każdym razem o wartość 0.1 Jaki wynik powinien się
wyświetlić, a jaki wyświetli się rzeczywiście? Otrzymane wyniki i wnioski zapisz na platformie
moodle.
#include <iostream>
#include <iomanip>
int main() {
 float suma = 0.0;
 for(int i=0; i<100; ++i)
 suma+=0.1f;
 std::cout <<std::fixed<<std::setprecision(20);
 std::cout <<"suma="<<suma<<std::endl;
 return 0;
}
Kompilacja i uruchamianie:
g++ lab1_zad6.cpp -o lab1_zad6.exe ; ./lab1_zad6.exe
Zadanie 7
Korzystając z poniższego programu sprawdź dokładność wykonywanych obliczeń, dla
których prawidłowy wynik wynosi 137. Otrzymane wyniki i wnioski zapisz na platformie
moodle. Spróbuj zmienić kolejność wykonywanych operacji, sprawdź różne możliwe
kombinacje w tym:
• (((x1 + x2) + x3) + x5) + x4;
• (((x1 + x2) + x4) + x3) + x5;
• (((x1 + x2) + x5) + x3) + x4;
• (((x1 + x5) + x3) + x4) + x2;
• (((x1 + x2) + x5) + x3) + x4;
• (((x1 + x3) + x2) + x4) + x5;
#include <iostream>
#include <iomanip>
int main() {
 double x1 = 1.00E+21;
 double x2 = 17.0;
 double x3 = -10.0;
 double x4 = 130.0;
 double x5 = -1.00E+21;
 double s1 = x1 + x2 + x3 + x4 + x5;
 std::cout<<"s1 "<<s1<<std::endl;
 return 0;
}
Kompilacja i uruchamianie:
g++ lab1_zad7.cpp -o lab1_zad7.exe ; ./lab1_zad7.exe
Zadanie 8 – nieobowiązkowe = ekstra bonus
Mając na uwadze fakt, że wartość pierwszego bitu oznacza znak dla typów
zmiennoprzecinkowych spróbuj napisać program umożliwiający zmianę znaku na przeciwny
bazując na bitowych operacjach przeznaczonych dla typu stałoprzecinkowego.
