from scipy.integrate import quad
import numpy as np
import matplotlib.pyplot as plt


def funkcja(x):
    return (
        58.30410476190477
        + 117.05914559083985 * x * (x - 0.0)
        - 18.734671751219533 * x * (x - 0.0) * (x - 0.1)
        - 0.7463783693451443 * x * (x - 0.0) * (x - 0.1) * (x - 0.2)
        + 2.168102827487625 * x * (x - 0.0) * (x - 0.1) * (x - 0.2) * (x - 0.3)
        + 1.1389523809523379
        * x
        * (x - 0.0)
        * (x - 0.1)
        * (x - 0.2)
        * (x - 0.3)
        * (x - 0.4)
        - 4.619987772589941
        * x
        * (x - 0.0)
        * (x - 0.1)
        * (x - 0.2)
        * (x - 0.3)
        * (x - 0.4)
        * (x - 0.5)
        - 31.258898645777293
        * x
        * (x - 0.0)
        * (x - 0.1)
        * (x - 0.2)
        * (x - 0.3)
        * (x - 0.4)
        * (x - 0.5)
        * (x - 0.6)
        + 118.68238050584586
        * x
        * (x - 0.0)
        * (x - 0.1)
        * (x - 0.2)
        * (x - 0.3)
        * (x - 0.4)
        * (x - 0.5)
        * (x - 0.6)
        * (x - 0.7)
        + 46.551393329044366
        * x
        * (x - 0.0)
        * (x - 0.1)
        * (x - 0.2)
        * (x - 0.3)
        * (x - 0.4)
        * (x - 0.5)
        * (x - 0.6)
        * (x - 0.7)
        * (x - 0.8)
        + 40.04248571428572
        * x
        * (x - 0.0)
        * (x - 0.1)
        * (x - 0.2)
        * (x - 0.3)
        * (x - 0.4)
        * (x - 0.5)
        * (x - 0.6)
        * (x - 0.7)
        * (x - 0.8)
        * (x - 0.9)
        + 46.55139332904474
        * x
        * (x - 0.0)
        * (x - 0.1)
        * (x - 0.2)
        * (x - 0.3)
        * (x - 0.4)
        * (x - 0.5)
        * (x - 0.6)
        * (x - 0.7)
        * (x - 0.8)
        * (x - 0.9)
        * (x - 1.0)
        + 118.68238050584564
        * x
        * (x - 0.0)
        * (x - 0.1)
        * (x - 0.2)
        * (x - 0.3)
        * (x - 0.4)
        * (x - 0.5)
        * (x - 0.6)
        * (x - 0.7)
        * (x - 0.8)
        * (x - 0.9)
        * (x - 1.0)
        * (x - 1.1)
        - 31.258898645777123
        * x
        * (x - 0.0)
        * (x - 0.1)
        * (x - 0.2)
        * (x - 0.3)
        * (x - 0.4)
        * (x - 0.5)
        * (x - 0.6)
        * (x - 0.7)
        * (x - 0.8)
        * (x - 0.9)
        * (x - 1.0)
        * (x - 1.1)
        * (x - 1.2)
        - 4.619987772589866
        * x
        * (x - 0.0)
        * (x - 0.1)
        * (x - 0.2)
        * (x - 0.3)
        * (x - 0.4)
        * (x - 0.5)
        * (x - 0.6)
        * (x - 0.7)
        * (x - 0.8)
        * (x - 0.9)
        * (x - 1.0)
        * (x - 1.1)
        * (x - 1.2)
        * (x - 1.3)
        + 1.1389523809526303
        * x
        * (x - 0.0)
        * (x - 0.1)
        * (x - 0.2)
        * (x - 0.3)
        * (x - 0.4)
        * (x - 0.5)
        * (x - 0.6)
        * (x - 0.7)
        * (x - 0.8)
        * (x - 0.9)
        * (x - 1.0)
        * (x - 1.1)
        * (x - 1.2)
        * (x - 1.3)
        * (x - 1.4)
        + 2.168102827487441
        * x
        * (x - 0.0)
        * (x - 0.1)
        * (x - 0.2)
        * (x - 0.3)
        * (x - 0.4)
        * (x - 0.5)
        * (x - 0.6)
        * (x - 0.7)
        * (x - 0.8)
        * (x - 0.9)
        * (x - 1.0)
        * (x - 1.1)
        * (x - 1.2)
        * (x - 1.3)
        * (x - 1.4)
        * (x - 1.5)
        - 0.7463783693448737
        * x
        * (x - 0.0)
        * (x - 0.1)
        * (x - 0.2)
        * (x - 0.3)
        * (x - 0.4)
        * (x - 0.5)
        * (x - 0.6)
        * (x - 0.7)
        * (x - 0.8)
        * (x - 0.9)
        * (x - 1.0)
        * (x - 1.1)
        * (x - 1.2)
        * (x - 1.3)
        * (x - 1.4)
        * (x - 1.5)
        * (x - 1.6)
        - 18.73467175121949
        * x
        * (x - 0.0)
        * (x - 0.1)
        * (x - 0.2)
        * (x - 0.3)
        * (x - 0.4)
        * (x - 0.5)
        * (x - 0.6)
        * (x - 0.7)
        * (x - 0.8)
        * (x - 0.9)
        * (x - 1.0)
        * (x - 1.1)
        * (x - 1.2)
        * (x - 1.3)
        * (x - 1.4)
        * (x - 1.5)
        * (x - 1.6)
        * (x - 1.7)
        + 117.0591455908395
        * x
        * (x - 0.0)
        * (x - 0.1)
        * (x - 0.2)
        * (x - 0.3)
        * (x - 0.4)
        * (x - 0.5)
        * (x - 0.6)
        * (x - 0.7)
        * (x - 0.8)
        * (x - 0.9)
        * (x - 1.0)
        * (x - 1.1)
        * (x - 1.2)
        * (x - 1.3)
        * (x - 1.4)
        * (x - 1.5)
        * (x - 1.6)
        * (x - 1.7)
        * (x - 1.8)
        + 58.30410476190477
        * x
        * (x - 0.0)
        * (x - 0.1)
        * (x - 0.2)
        * (x - 0.3)
        * (x - 0.4)
        * (x - 0.5)
        * (x - 0.6)
        * (x - 0.7)
        * (x - 0.8)
        * (x - 0.9)
        * (x - 1.0)
        * (x - 1.1)
        * (x - 1.2)
        * (x - 1.3)
        * (x - 1.4)
        * (x - 1.5)
        * (x - 1.6)
        * (x - 1.7)
        * (x - 1.8)
        * (x - 1.9)
    )


def metoda_gaussa(f, a, b, n):
    x = [-0.5773502691896257, 0.5773502691896257]
    w = [-1.0, 1.0]

    t = 0.5 * (b - a)
    u = 0.5 * (b + a)

    pole = 0.0
    for i in range(n):
        xi = t * x[i] + u
        wi = t * w[i]

        fxi = f(xi)

        pole += wi * fxi

    pole *= t

    return pole


a = 0.0
b = 2.0
n = 2
x = np.linspace(a, b, 100)
y = funkcja(x)

# Obliczanie pola
pole = metoda_gaussa(funkcja, a, b, n)
print("Pole powierzchni funkcji:", pole)


# Wykres funkcji
plt.plot(x, y, label="Funkcja")
plt.fill_between(x, y, where=(x >= a) & (x <= b), alpha=0.3, label="Pole")

# Dodanie etykiet i legendy
plt.xlabel("x")
plt.ylabel("y")
plt.title("Wykres funkcji i pole powierzchni")
plt.legend()

# Wyświetlenie wyniku
plt.text(
    0.70, 0.95, f"Pole = {pole:.2f}", transform=plt.gca().transAxes, ha="left", va="top"
)

# Wyświetlenie wykresu
plt.show()
